# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/compose/compose-file/

# Here the instructions define your application as a service called "app".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  app:
    image: php:8.2.9-apache
    build:
      context: ./app
      target: final
    # If your application exposes a port, uncomment the following lines and change
    # the port numbers as needed. The first number is the host port and the second
    # is the port inside the container.
    ports:
      - 8080:8080

    # The commented out section below is an example of how to define a PostgreSQL
    # database that your application can use. `depends_on` tells Docker Compose to
    # start the database before your application. The `db-data` volume persists the
    # database data between container restarts. The `db-password` secret is used
    # to set the database password. You must create `db/password.txt` and add
    # a password of your choosing to it before running `docker compose up`.
    depends_on:
      db:
        condition: service_healthy
  db:
      image: mysql:latest
      restart: always
      user: mysql
      # secrets:
      #   - db-password
      # volumes:
      #   - db-data:/var/lib/mysql/data
      environment:
        - MYSQL_ROOT_PASSWORD=root
        - MYSQL_DATABASE=ocha
        - MYSQL_USER=ochauser
        - MYSQL_PASSWORD=ochapassword
        # - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
      expose:
        - 5432
      # healthcheck:
      #   test: [ "CMD", "pg_isready" ]
      #   interval: 10s
      #   timeout: 5s
      #   retries: 5
  # volumes:
  #   db-data:
  # secrets:
  #   db-password:
  #     file: db/password.txt
